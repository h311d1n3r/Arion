#include <arion/arion.hpp>
#include <arion_test/common.hpp>

//simple Hello World!
unsigned char shellcode_x8664[] = {
    0x48, 0x83, 0xec, 0x10,0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x48, 
    0xc7, 0x44, 0x24, 0x04, 0x65, 0x6c, 0x6c, 0x6f,0xc7, 0x44, 0x24,
    0x08, 0x20, 0x57, 0x6f,0x72, 0xc7, 0x44, 0x24, 0x0c, 0x6c, 0x64,
    0x21, 0x0a, 0xb8, 0x01, 0x00, 0x00, 0x00,0xbf, 0x01, 0x00, 0x00,
    0x00, 0x48, 0x89, 0xe6, 0x48, 0x83, 0xc6, 0x03,0xba, 0x0e, 0x00,
    0x00, 0x00, 0x0f, 0x05, 0xb8, 0x3c, 0x00, 0x00, 0x00,0x48, 0x31, 
    0xff,0x0f, 0x05                          
};

unsigned char shellcode_x86[] = {
    0x68,0x6c,0x64,0x21,0x0a,0x68,0x20,0x57,0x6f,0x72, 
    0x68,0x65,0x6c,0x6c,0x6f,0x68,0x00,0x00,0x00,0x48,
    0xb8,0x04,0x00,0x00,0x00,0xbb,0x01,0x00,0x00,0x00,
    0x89,0xe1,0x83,0xc1,0x03,0xba,0x0e,0x00,0x00,0x00,
    0xcd,0x80,0xb8,0x01,0x00,0x00,0x00,0x31,0xdb,0xcd,
    0x80,
};

unsigned char shellcode_arm[] = {
    0x10,0xd0,0x4d,0xe2,0x0d,0x00,0xa0,0xe1,0x3c,0x10,0x9f,0xe5,
    0x0c,0x10,0x80,0xe5,0x38,0x10,0x9f,0xe5,0x08,0x10,0x80,0xe5,
    0x34,0x10,0x9f,0xe5,0x04,0x10,0x80,0xe5,0x12,0x13,0xa0,0xe3,
    0x00,0x10,0x80,0xe5,0x00,0x10,0xa0,0xe1,0x03,0x10,0x81,0xe2,
    0x0e,0x20,0xa0,0xe3,0x04,0x70,0xa0,0xe3,0x01,0x00,0xa0,0xe3,
    0x00,0x00,0x00,0xef,0x00,0x00,0xa0,0xe3,0x01,0x70,0xa0,0xe3,
    0x00,0x00,0x00,0xef,0x6c,0x64,0x21,0x0a,0x20,0x57,0x6f,0x72,
    0x65,0x6c,0x6c,0x6f
};

unsigned char shellcode_arm64[] = {
    0xff,0x43,0x00,0xd1,0xe0,0x03,0x00,0x91,0xc1,0x01,0x00,0x58,
    0x01,0x04,0x00,0xf9,0xc1,0x01,0x00,0x58,0x01,0x00,0x00,0xf9,
    0x01,0x00,0x00,0xf9,0xe1,0x03,0x00,0xaa,0x21,0x0c,0x00,0x91,
    0xc2,0x01,0x80,0xd2,0x20,0x00,0x80,0xd2,0x08,0x08,0x80,0xd2,
    0x01,0x00,0x00,0xd4,0x00,0x00,0x80,0xd2,0xa8,0x0b,0x80,0xd2,
    0x01,0x00,0x00,0xd4,0x20,0x57,0x6f,0x72,0x6c,0x64,0x21,0x0a,
    0x00,0x00,0x00,0x48,0x65,0x6c,0x6c,0x6f
};


TEST_P(ArionMultiarchTest, BaremetalDefaultMappingsHelloWorld)
{
    testing::internal::CaptureStdout();
    try
    {
        unsigned char* selected_shellcode = nullptr;
        size_t shellcode_len = 0;
        std::unique_ptr<Baremetal> baremetal = std::make_unique<Baremetal>();

        if (this->arch == "x86")
        {
            selected_shellcode = shellcode_x86;
            shellcode_len = sizeof(shellcode_x86);
            baremetal->arch = arion::CPU_ARCH::X86_ARCH;
        }
        else if (this->arch == "x86-64")
        {
            selected_shellcode = shellcode_x8664;
            shellcode_len = sizeof(shellcode_x8664);
            baremetal->arch = arion::CPU_ARCH::X8664_ARCH;
        }
        else if (this->arch == "arm")
        {
            selected_shellcode = shellcode_arm;
            shellcode_len = sizeof(shellcode_arm);
            baremetal->arch = arion::CPU_ARCH::ARM_ARCH;
        }
        else if (this->arch == "arm64")
        {
            selected_shellcode = shellcode_arm64;
            shellcode_len = sizeof(shellcode_arm64);
            baremetal->arch = arion::CPU_ARCH::ARM64_ARCH;
        }
        else
        {
            FAIL() << "Unsupported architecture: " << this->arch;
        }

        std::unique_ptr<Config> config = std::make_unique<Config>();
        
        auto coderaw = baremetal->coderaw;
        coderaw->insert(coderaw->end(), selected_shellcode, selected_shellcode + shellcode_len);

        config->set_field<arion::ARION_LOG_LEVEL>("log_lvl", arion::ARION_LOG_LEVEL::OFF);

        std::shared_ptr<ArionGroup> arion_group = std::make_shared<ArionGroup>();
        std::string rootfs_path = this->arion_root_path + "/rootfs/" + this->arch + "/rootfs";

        std::shared_ptr<Arion> arion =
            Arion::new_instance(std::move(baremetal), rootfs_path, {}, rootfs_path + "/root", std::move(config));

        arion_group->add_arion_instance(arion);
        arion_group->run();
    }
    catch (std::exception& e)
    {
        testing::internal::GetCapturedStdout();
        FAIL() << "Exception caught: " << e.what();
    }
    std::string output = testing::internal::GetCapturedStdout();
    EXPECT_STREQ(output.c_str(), "Hello World!\n");
}
